local old={}
turtle.x=0
turtle.y=0
turtle.z=0
turtle.facing="east"

local function saveState()
        -- print("turtle save state")
        local outfile = fs.open("saveTurtleState.lua","w")
        outfile.write("turtle.x = "..turtle.x.."\n")
        outfile.write("turtle.y = "..turtle.y.."\n")
        outfile.write("turtle.z = "..turtle.z.."\n")
        outfile.write("turtle.facing = \""..turtle.facing.."\"\n")
        outfile.close()
end
turtle.saveState = saveState

local function loadState()
        dofile("saveTurtleState.lua")
end
turtle.loadState = loadState

local function clearState()
    fs.delete("saveTurtleState.lua")
end
turtle.clearState = clearState

local function init()
    if fs.exists("saveTurtleState.lua") then
        print("turtle load state")
        loadState()
    else
        print("turtle init state")
        turtle.x=0
        turtle.y=0
        turtle.z=0
        turtle.facing="east"
    end
    saveState()
end
turtle.init = init

if turtle.onEachMove==nil then
	local function onEachMove()
        turtle.saveState()
		return true
	end
	turtle.onEachMove=onEachMove
end

local function directionToNumber(direction)
	if direction == "north" then
		return 0
	elseif direction == "east" then
		return 1
	elseif direction == "south" then
		return 2
	elseif direction == "west" then
		return 3
	end
end

local function turnTo(direction)
	if ( directionToNumber(turtle.facing ) - 1) % 4 == directionToNumber(direction) then
		while turtle.facing ~= direction do
			turtle.turnLeft()
		end
	else
		while turtle.facing ~= direction do
			turtle.turnRight()
		end
	end
	return true
end
turtle.turnTo = turnTo

local function goto(x,y,z)
	local success = true
	local oldDirection = turtle.facing


	while turtle.y < y do --go y+
		success = success and turtle.up() 
		if not success then return false end
	end
	while turtle.y > y do --go y-
		success = success and turtle.down()
		if not success then return false end
	end

	if turtle.x < x then --go x+
		turtle.turnTo("east")
		while turtle.x < x do
			success = success and turtle.forward()
			if not success then return false end
		end
	end
	if turtle.x > x then --go x-
		turtle.turnTo("west")
		while turtle.x > x do
			success = success and turtle.forward()
			if not success then return false end
		end
	end

	if turtle.z < z then --go z+
		turtle.turnTo("south") --that's z+, i don't know either. fuck that
		while turtle.z < z do
			success = success and turtle.forward()
			if not success then return false end
		end
	end
	if turtle.z > z then --go z-
		turtle.turnTo("north")
		while turtle.z > z do
			success = success and turtle.forward()
			if not success then return false end
		end
	end

--	turtle.turnTo(oldDirection)
	return success
end
turtle.goto = goto

old.turtleUp=turtle.up
function up()
    while not old.turtleUp() do
        turtle.digUp()
    end
    turtle.y = turtle.y+1
	turtle.onEachMove()
	return true
end
turtle.up=up

old.turtleDown=turtle.down
function down()
    while not old.turtleDown() do
        turtle.digDown()
    end
	turtle.y=turtle.y-1
	turtle.onEachMove()
	return true
end
turtle.down=down

old.turtleForward=turtle.forward
function forward()
    while not old.turtleForward() do
        turtle.dig()
    end
	if turtle.facing == "north" then
		turtle.z=turtle.z-1
	elseif turtle.facing == "south" then
		turtle.z=turtle.z+1
	elseif turtle.facing == "east" then
		turtle.x=turtle.x+1
	elseif turtle.facing == "west" then
		turtle.x=turtle.x-1
	end
	turtle.onEachMove()
	return true
end
turtle.forward = forward

old.turtleBack=turtle.back
function back()
	if old.turtleBack() then
		if turtle.facing == "north" then
			turtle.z=turtle.z+1
		elseif turtle.facing == "south" then
			turtle.z=turtle.z-1
		elseif turtle.facing == "east" then
			turtle.x=turtle.x-1
		elseif turtle.facing == "west" then
			turtle.x=turtle.x+1
		end
		turtle.onEachMove()
		return true
	else
		return false
	end
end
turtle.back = back

old.turtleTurnLeft=turtle.turnLeft
function turnLeft()
	if old.turtleTurnLeft() then
		if turtle.facing == "north" then
			turtle.facing = "west"
		elseif turtle.facing == "west" then
			turtle.facing = "south"
		elseif turtle.facing == "south" then
			turtle.facing = "east"
		elseif turtle.facing == "east" then
			turtle.facing = "north"
		end
		turtle.onEachMove()
		return true
	else
		return false
	end
end
turtle.turnLeft = turnLeft

old.turtleTurnRight=turtle.turnRight
function turnRight()
	if old.turtleTurnRight() then
		if turtle.facing == "north" then
			turtle.facing = "east"
		elseif turtle.facing == "east" then
			turtle.facing = "south"
		elseif turtle.facing == "south" then
			turtle.facing = "west"
		elseif turtle.facing == "west" then
			turtle.facing = "north"
		end
		turtle.onEachMove()
		return true
	else
		return false
	end
end
turtle.turnRight = turnRight

function getCoords()
    return turtle.x, turtle.y, turtle.z
end
turtle.getCoords = getCoords

-- vim:syntax=lua
